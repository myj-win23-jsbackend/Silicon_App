@page "/signup"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Silicon_BlazorApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager


<PageTitle>Sign up</PageTitle>

<section class="signUp">
    <div class="container">

        @if (!string.IsNullOrEmpty(ViewData["StatusMessage"]?.ToString()))
        {
            <div class="alert alert-danger">
                @ViewData["StatusMessage"]
            </div>
        }

        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="signup" novalidate>
            <DataAnnotationsValidator />
            <AntiforgeryToken />

            <h1>Create Account</h1>
            <p>Already have an account? <a href="/signin">Sign in here</a></p>


            <div class="form-content">

                <div id="form-firstname" class="input-group">
                    <label>First name</label>
                    <InputText @bind-Value="Input.FirstName" class="form-control" autocomplete="givenname" aria-required="true" placeholder="Enter your first name" />
                    <ValidationMessage For="() => Input.FirstName" />
                </div>





                <div id="form-lastname" class="input-group">
                    <label asp-for="LastName"></label>
                    <input asp-for="LastName" />
                    <span asp-validation-for="LastName"></span>
                </div>
                <div id="form-email" class="input-group">
                    <label asp-for="Email"></label>
                    <input asp-for="Email" />
                    <span asp-validation-for="Email"></span>
                </div>
                <div id="form-password" class="input-group">
                    <label asp-for="Password"></label>
                    <input asp-for="Password" />
                    <span asp-validation-for="Password"></span>
                </div>
                <div id="form-confirmpassword" class="input-group">
                    <label asp-for="ConfirmPassword"></label>
                    <input asp-for="ConfirmPassword" />
                    <span asp-validation-for="ConfirmPassword"></span>
                </div>
                <div id="form-checkbox" class="checkbox-group">
                    <div class="input-group">
                        <input asp-for="TermsAndConditions" />
                        <label asp-for="TermsAndConditions"></label>
                    </div>
                    <span asp-validation-for="TermsAndConditions"></span>
                </div>
                <div id="form-button">
                    <button type="submit" class="btn btn-theme">Sign up</button>
                </div>
            </div>
        </EditForm>

    </div>
</section>





@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    public async Task RegisterUser(EditContext editContext)
    {

        var user = new ApplicationUser { UserName = Input.Email, Email = Input.Email };

        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
            return;



        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            NavigationManager.NavigateTo($"/confirm?email={user.Email}");
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        NavigationManager.NavigateTo(ReturnUrl ?? "/");
    }



    private sealed class InputModel
    {
        [Required]
        [Display(Name = "First name")]
        public string FirstName { get; set; } = null!;

        [Required]
        [Display(Name = "Last name")]
        public string LastName { get; set; } = null!;

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
